## Download
```
helm pull oci://ghcr.io/second-front/uchart
```
## How to use for organizations
1. Create a values.yaml in the root of a manifests project repo.
   ```touch base-values.yaml```
1. For each microservice to deploy populate the microservices block and fill in required global fields
```yaml
global:
  applicationName: testapp # required for naming application to be deployed
  customerName: testapp    # required for labeling organization
  impactLevel: il2         # required for labeling
  environment: dev         # required for labeling
microservices:
  <MSVC_NAME>: #   (example: frontend)
    image:
      repository: <CONTAINER_REGISTRY_PATH>
      tag: <TAG OF THE CONTAINER>
  <MSVC_NAME_2>: # (example: backend)
    ...
```
5. Configure available subcharts as needed like postgres, pgadmin, etc...
6. See ***example*** deployed app for ***usage*** [here](https://code.il2.gamewarden.io/gamewarden/tools/charts/uchart/-/blob/main/docs/test-values)

{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

chart version: {{ template "chart.version" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

## How to generate schema automatically
```
helm plugin install https://github.com/karuppiah7890/helm-schema-gen
helm schema-gen values.yaml > values.schema.json
or
go install github.com/dadav/helm-schema/cmd/helm-schema@latest
yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1) * select(fileIndex == 2) * select(fileIndex == 3)' values.yaml docs/helm-schema/microservices.yaml docs/helm-schema/subCharts.yaml docs/test-values/job-example-values.yaml > merged-values.yaml
helm-schema -n -k additionalProperties -k required -f merged-values.yaml
rm merged-values.yaml
```

## Chart schema available also at:
```
https://schemas.gamewarden.io/schemas/helm/uchart/uchart-1.0.21.json
```

## Manually push new version of chart to registry and push tag to git
```
helm package .
helm push $(ls *.tgz) oci://registry.gamewarden.io/charts
helm push $(ls *.tgz) oci://ghcr.io/second-front
helm push $(ls *.tgz) oci://ghcr.io/second-front/charts
helm push $(ls *.tgz) oci://r.gamewarden.io/charts
rm $(ls *.tgz)
```

## How to update docs dynamically
```docker run --rm --volume "$(pwd):/helm-docs" -u $(id -u) jnorwood/helm-docs:latest```

## Run test values agains't chart
```shell
for i in $(ls docs/test-values); do helm template . -f docs/test-values/$i; done
for i in $(ls docs/test-values); do helm template . -f docs/test-values/$i | kubeconform -ignore-missing-schemas -strict; done
```
