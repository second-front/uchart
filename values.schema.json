{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$defs": {
    "subchart": {
      "additionalProperties": {
        "properties": {
          "chart": {
            "default": "uchart",
            "type": "string"
          },
          "chartUrl": {
            "default": "registry.gamewarden.io/charts",
            "type": "string"
          },
          "enabled": {
            "default": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "project": {
            "type": "string"
          },
          "revision": {
            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
            "type": "string"
          },
          "sync": {
            "default": true,
            "type": "boolean"
          },
          "valueFiles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "values": {
            "type": "object"
          },
          "valuesRepo": {
            "type": "string"
          },
          "wave": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "required": [],
      "type": "object"
    },
    "microservice": {
      "additionalProperties": {
        "properties": {
          "command": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "config": {
            "properties": {
              "data": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "envFrom": {
            "items": {
              "properties": {
                "configMapRef": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "secretRef": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "extraEnvs": {
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "valueFrom": {
                  "properties": {
                    "configMapKeyRef": {
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "secretKeyRef": {
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "image": {
            "properties": {
              "name": {
                "type": "string"
              },
              "tag": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "livenessProbe": {
            "properties": {
              "failureThreshold": {
                "type": "integer"
              },
              "httpGet": {
                "properties": {
                  "path": {
                    "type": "string"
                  },
                  "port": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "initialDelaySeconds": {
                "type": "integer"
              },
              "periodSeconds": {
                "type": "integer"
              },
              "successThreshold": {
                "type": "integer"
              },
              "tcpSocket": {
                "properties": {
                  "port": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "timeoutSeconds": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "match": {
            "items": {
              "properties": {
                "uri": {
                  "properties": {
                    "prefix": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "namespace": {
            "type": "string"
          },
          "readinessProbe": {
            "properties": {
              "failureThreshold": {
                "type": "integer"
              },
              "initialDelaySeconds": {
                "type": "integer"
              },
              "periodSeconds": {
                "type": "integer"
              },
              "successThreshold": {
                "type": "integer"
              },
              "tcpSocket": {
                "properties": {
                  "port": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "timeoutSeconds": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "resources": {
            "properties": {
              "limits": {
                "properties": {
                  "cpu": {
                    "type": "string"
                  },
                  "memory": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "requests": {
                "properties": {
                  "cpu": {
                    "type": "string"
                  },
                  "memory": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "secrets": {
            "properties": {
              "data": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "generateKeys": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "service": {
            "properties": {
              "additionalPorts": {
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "port": {
                      "type": "integer"
                    },
                    "protocol": {
                      "type": "string"
                    },
                    "targetPort": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "port": {
                "type": "integer"
              },
              "targetPort": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "topologySpreadConstraints": {
            "items": {
              "properties": {
                "labelSelector": {
                  "properties": {
                    "matchLabels": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "maxSkew": {
                  "type": "integer"
                },
                "topologyKey": {
                  "type": "string"
                },
                "whenUnsatisfiable": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "volumeMounts": {
            "items": {
              "properties": {
                "mountPath": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "volumes": {
            "items": {
              "properties": {
                "configMap": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "path": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "required": [],
      "type": "object"
    }
  },
  "properties": {
    "argocd": {
      "properties": {
        "createNamespace": {
          "default": false,
          "description": "Create all namespaces beforehand in sourceNamespaces (the main namespace auto-creates from argocd)",
          "required": [],
          "title": "createNamespace",
          "type": "boolean"
        },
        "disableProjectCreation": {
          "default": false,
          "description": "Disable option for creation of project for applications created from subCharts if nesting",
          "required": [],
          "title": "disableProjectCreation",
          "type": "boolean"
        },
        "projectOverride": {
          "default": "",
          "description": "Project override for the argocdWrapper microservice Application",
          "required": [],
          "title": "projectOverride",
          "type": "string"
        },
        "sourceNamespaces": {
          "description": "Add additional allowed namespaces to deploy to beyond the default single namespace from applicationName",
          "items": {
            "required": []
          },
          "required": [],
          "title": "sourceNamespaces",
          "type": "array"
        },
        "wrapperAppOff": {
          "default": false,
          "description": "Turn off the argocdWrapper Application.yaml template and instead deploy microservices without being under an argocd application",
          "required": [],
          "title": "wrapperAppOff",
          "type": "boolean"
        },
        "wrapperAppWave": {
          "default": "",
          "description": "Set argocd sync wave number on just the argocdWrapper Application if used",
          "required": [],
          "title": "wrapperAppWave",
          "type": "string"
        },
        "wrapperSync": {
          "default": true,
          "description": "Sync options - Turn on or off automated syncing with pruning for the argocdWrapper Application from microservice",
          "required": [],
          "title": "wrapperSync",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "argocd",
      "type": "object"
    },
    "ciliumNetworkPolicies": {
      "properties": {
        "appPolicy": {
          "properties": {
            "enabled": {
              "default": true,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "appPolicy",
          "type": "object"
        },
        "customPolicies": {
          "description": "To add additional policies to the app namespace",
          "items": {
            "required": []
          },
          "required": [],
          "title": "customPolicies",
          "type": "array"
        },
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "ciliumNetworkPolicies",
      "type": "object"
    },
    "config": {
      "description": "Global application configmap - used for all microservices deployed to one namespace",
      "properties": {
        "annotations": {
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "data": {
          "required": [],
          "title": "data",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "config",
      "type": "object"
    },
    "defaults": {
      "properties": {
        "affinity": {
          "description": "Ensure that pods are hosted on specific nodes",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "autoscaling": {
          "properties": {
            "enabled": {
              "default": false,
              "description": " -- Horizontal Autoscaling of pods",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 10,
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 80,
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "metrics": {
              "default": false,
              "required": [],
              "title": "metrics",
              "type": "object"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "domain": {
          "default": "gamewarden.io",
          "description": "domain for istio virtual services",
          "required": [],
          "title": "domain",
          "type": "string"
        },
        "envFrom": {
          "description": "Extra environment variables from secrets or configMaps",
          "items": {
            "anyOf": [
              {
                "properties": {
                  "configMapRef": {
                    "properties": {
                      "name": {
                        "default": "default-config",
                        "required": [],
                        "title": "name",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "title": "configMapRef",
                    "type": "object"
                  }
                },
                "required": [],
                "type": "object"
              }
            ],
            "required": []
          },
          "required": [],
          "title": "envFrom",
          "type": "array"
        },
        "extraEnvs": {
          "description": "Extra environment variables",
          "required": [],
          "title": "extraEnvs",
          "type": "object"
        },
        "image": {
          "properties": {
            "pullPolicy": {
              "default": "IfNotPresent",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Required - repository tag along with either repository or name (one is required)",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Pull secrets for the image/s",
          "items": {
            "anyOf": [
              {
                "properties": {
                  "name": {
                    "default": "private-registry",
                    "required": [],
                    "title": "name",
                    "type": "string"
                  }
                },
                "required": [],
                "type": "object"
              }
            ],
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "minReadySeconds": {
          "default": 0,
          "required": [],
          "title": "minReadySeconds",
          "type": "integer"
        },
        "nodeSelector": {
          "description": "Restrict a Pod to only be able to run on a particular Node.",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podDisruptionBudget": {
          "description": "Example Pod Disruption Budget values",
          "required": [],
          "title": "podDisruptionBudget",
          "type": "object"
        },
        "podSecurityContext": {
          "required": [],
          "title": "podSecurityContext",
          "type": "object"
        },
        "replicaCount": {
          "default": 1,
          "description": "Number of replicas for the microservice",
          "required": [],
          "title": "replicaCount",
          "type": "integer"
        },
        "resources": {
          "properties": {
            "requests": {
              "description": "by default run without limits, and no limitRanges are set\nlimits:\n  cpu: \"2\"\n  memory: 2Gi",
              "properties": {
                "cpu": {
                  "default": "100m",
                  "required": [],
                  "title": "cpu",
                  "type": "string"
                },
                "memory": {
                  "default": "128Mi",
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "securityContext": {
          "required": [],
          "title": "securityContext",
          "type": "object"
        },
        "service": {
          "properties": {
            "additionalPorts": {
              "description": "Add additional ports to expose",
              "required": [],
              "title": "additionalPorts",
              "type": "object"
            },
            "appProtocol": {
              "default": "TCP",
              "description": "Set the app procotol to allow explicit selection. (http, http2, https, tcp, tls, grpc, mongo, mysql, redis)",
              "required": [],
              "title": "appProtocol",
              "type": "string"
            },
            "disablePortName": {
              "default": false,
              "description": "Set to true to remove the port name",
              "required": [],
              "title": "disablePortName",
              "type": "boolean"
            },
            "enabled": {
              "default": true,
              "description": "Use a service with Microservice",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "headless": {
              "default": false,
              "description": "Set the service to headless",
              "required": [],
              "title": "headless",
              "type": "boolean"
            },
            "name": {
              "default": "http",
              "description": "Set a name for the port",
              "required": [],
              "title": "name",
              "type": "string"
            },
            "port": {
              "default": 80,
              "description": "Set the port you want to expose the service on.",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "targetPort": {
              "default": 8080,
              "description": "Set the default targetPort of service to 8080 ( Port the application is listening on within the container )",
              "required": [],
              "title": "targetPort",
              "type": "integer"
            },
            "type": {
              "default": "ClusterIP",
              "description": "Set the service type (ClusterIP, NodePort, LoadBalancer, ExternalName )",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "serviceAccount": {
          "properties": {
            "annotations": {
              "description": "Annotations to add to the service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "create": {
              "default": false,
              "description": "Specifies whether a service account should be created",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "labels": {
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "name": {
              "default": "",
              "description": "The name of the service account to use.\nIf not set and create is true, a name is generated using the fullname template",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "strategy": {
          "description": "https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy",
          "required": [],
          "title": "strategy",
          "type": "object"
        },
        "tolerations": {
          "description": "Applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "virtualService": {
          "description": "istio virtual service from chart enabled",
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "virtualService",
          "type": "object"
        }
      },
      "required": [],
      "title": "defaults",
      "type": "object"
    },
    "extraManifests": {
      "description": "Extra kubernetes objects to deploy inline - Takes in MAP or LIST",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraManifests",
      "type": ["array", "object"]
    },
    "fullnameOverride": {
      "default": "",
      "required": [],
      "title": "fullnameOverride",
      "type": "string"
    },
    "generatedSecrets": {
      "description": "Used to get around ArgoCD generating new secrets with argocd ignore annotations",
      "properties": {
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "generatedSecrets",
      "type": "object"
    },
    "global": {
      "description": "# Global values are used for subcharts",
      "properties": {
        "applicationName": {
          "default": "testapp",
          "description": "Required",
          "required": [],
          "title": "applicationName",
          "type": "string"
        },
        "customerName": {
          "default": "testapp",
          "description": "Required",
          "required": [],
          "title": "customerName",
          "type": "string"
        },
        "destinationCluster": {
          "default": "multi-tenant-development-cluster",
          "description": "Required for using ArgocdWrapper method with subCharts key",
          "required": [],
          "title": "destinationCluster",
          "type": "string"
        },
        "environment": {
          "default": "dev",
          "description": "Required",
          "required": [],
          "title": "environment",
          "type": "string"
        },
        "gateway": {
          "default": "istio-system/private",
          "required": [],
          "title": "gateway",
          "type": "string"
        },
        "image": {
          "properties": {
            "defaultImageRegistry": {
              "default": "registry.gamewarden.io",
              "description": "Use this with \u003cmicroservice-name\u003e.image.name instead of using \u003cmicroservice-name\u003e.image.repository to reduce duplicate yaml code in values.yaml",
              "required": [],
              "title": "defaultImageRegistry",
              "type": "string"
            },
            "defaultImageRepository": {
              "default": "testapp",
              "required": [],
              "title": "defaultImageRepository",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "impactLevel": {
          "default": "il2",
          "description": "Required - Used for resource tracking with labels and used for ArgoCD naming",
          "required": [],
          "title": "impactLevel",
          "type": "string"
        },
        "istio": {
          "description": "Istio settings",
          "properties": {
            "mtls": {
              "description": "enforce mtls PeerAuthentication",
              "properties": {
                "enabled": {
                  "default": true,
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                }
              },
              "required": [],
              "title": "mtls",
              "type": "object"
            }
          },
          "required": [],
          "title": "istio",
          "type": "object"
        }
      },
      "required": ["applicationName", "destinationCluster"],
      "title": "global",
      "type": "object"
    },
    "imageCredentials": {
      "items": {
        "required": []
      },
      "required": [],
      "title": "imageCredentials",
      "type": "array"
    },
    "manifests": {
      "description": "Extra kubernetes objects to deploy inline",
      "required": [],
      "title": "manifests",
      "type": "object"
    },
    "microservices": {
      "$ref": "#/$defs/microservice",
      "required": [],
      "title": "microservices",
      "type": "object"
    },
    "nameOverride": {
      "default": "",
      "description": "",
      "required": [],
      "title": "nameOverride",
      "type": "string"
    },
    "networkPolicies": {
      "properties": {
        "appPolicy": {
          "properties": {
            "enabled": {
              "default": true,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "appPolicy",
          "type": "object"
        },
        "customPolicies": {
          "description": "To add additional netpols to the app namespace",
          "items": {
            "required": []
          },
          "required": [],
          "title": "customPolicies",
          "type": "array"
        },
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "networkPolicies",
      "type": "object"
    },
    "rbac": {
      "properties": {
        "create": {
          "default": false,
          "required": [],
          "title": "create",
          "type": "boolean"
        },
        "rules": {
          "items": {
            "required": []
          },
          "required": [],
          "title": "rules",
          "type": "array"
        }
      },
      "required": [],
      "title": "rbac",
      "type": "object"
    },
    "secrets": {
      "description": "Global application secret - used for all microservices deployed to one namespace",
      "properties": {
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "secrets",
      "type": "object"
    },
    "subCharts": {
      "$ref": "#/$defs/subchart",
      "required": [],
      "title": "subCharts",
      "type": "object"
    }
  },
  "required": ["global", "microservices"],
  "type": "object"
}
