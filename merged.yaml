---
defaults:
  envFrom:
    - configMapRef:
        name: default-config
    - configMapRef:
        name: default-config
    - configMapRef:
        name: uni-geodata
    - secretRef:
        name: app-secrets
    - configMapRef:
        name: default-config
    - configMapRef:
        name: default-config
    - configMapRef:
        name: default-config
  strategy:
    type: Recreate
  podSecurityContext:
    fsGroup: 1111
    fsGroupChangePolicy: OnRootMismatch
    runAsNonRoot: true
  securityContext:
    runAsUser: 1111
    runAsGroup: 1111
    runAsNonRoot: true
  virtualService:
    enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 2Gi
# Should be organized by order of vs prefix for now
microservices:
  example-daemonset:
    daemonset:
      enabled: true
    containers:
      backend:
        envs:
          test1: "yes"
          test2: noooo
        labels:
          protect: keycloak
        resources:
          limits:
            cpu: 400m
            memory: 3Gi
          requests:
            cpu: 400m
            memory: 3Gi
        image:
          name: rear
          tag: "isanotherwaytosayit"
        service:
          type: ClusterIP
          port: 80
          name: http
          targetPort: 8080
          appProtocol: http
          additionalPorts:
            - port: 5005
              targetPort: 5005
              protocol: TCP
              name: backend
      gingerbreadMan:
        securityContext:
        # test: test
        envs:
          testVar1: eat
          testVariableTwo: me
        image:
          name: test1image
          tag: test1
      mainContainer:
        image:
          name: test2image
          tag: test2
    image:
      repository: example-repo
      tag: 1.0.0
    command:
      - /bin/sh
      - -c
    args:
      - /scripts/example-command.sh # Command script to run
    envs:
      ENV_VAR_1: value1
      ENV_VAR_2: value2
    envFrom:
      - secretRef:
          name: example
      - configMapRef:
          name: example
    securityContext:
      capabilities:
        add:
          - SYS_NICE
        drop:
          - KILL
    resources:
      limits:
        cpu: 400m
        memory: 3Gi
      requests:
        cpu: 400m
        memory: 3Gi
    initContainers:
      - name: theme
        image: registry.gamewarden.io/steelbank/cgr/git:2.44.0-r2
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |-
            git clone https://oauth2:$token@code.gamewarden.io/sandbox/gamewarden-kc-theme.git /tmp/themes
            cp -R /tmp/themes/theme/* /tmp/
            rm -rf /tmp/themes
        volumeMounts:
          - name: theme
            mountPath: /tmp/
        env:
          - name: token
            valueFrom:
              secretKeyRef:
                name: keycloak-keycloak-git
                key: token
    volumeMounts:
      - name: example-config-volume
        mountPath: /wfConfig
    volumes:
      - name: example-config-volume
        configMap:
          name: example-lens
          items:
            - key: config.json
              path: config.json
  backend:
    statefulset:
      enabled: true
    labels:
      protect: keycloak
    namespace: testapp
    resources:
      limits:
        cpu: 400m
        memory: 3Gi
      requests:
        cpu: 400m
        memory: 3Gi
    image:
      repository: registry.gamewarden.io/gw/keycloak
      tag: nightly
  frontend: null
  example-cronjob:
    cronjob:
      enabled: false
      schedule: '*/7 * * * *' # Runs every 7 minutes
      concurrencyPolicy: Forbid
      successfulJobsHistoryLimit: 7
      failedJobsHistoryLimit: 77
      suspended: false # CronJob is not suspended; set to true to disable it
      backoffLimit: 7
      completions: 7
      parallelism: 7
    image:
      repository: example-repo
      tag: 1.0.0
    command:
      - /bin/sh
      - -c
    args:
      - /scripts/example-command.sh # Command script to run
    envs:
      ENV_VAR_1: value1
      ENV_VAR_2: value2
    envFrom:
      - secretRef:
          name: example
      - configMapRef:
          name: example
    securityContext:
      capabilities:
        add:
          - SYS_NICE
        drop:
          - KILL
    resources:
      limits:
        cpu: 400m
        memory: 3Gi
      requests:
        cpu: 400m
        memory: 3Gi
    initContainers:
      - name: theme
        image: registry.gamewarden.io/steelbank/cgr/git:2.44.0-r2
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |-
            git clone https://oauth2:$token@code.gamewarden.io/sandbox/gamewarden-kc-theme.git /tmp/themes
            cp -R /tmp/themes/theme/* /tmp/
            rm -rf /tmp/themes
        volumeMounts:
          - name: theme
            mountPath: /tmp/
        env:
          - name: token
            valueFrom:
              secretKeyRef:
                name: keycloak-keycloak-git
                key: token
    volumeMounts:
      - name: example-config-volume
        mountPath: /wfConfig
    volumes:
      - name: example-config-volume
        configMap:
          name: example-lens
          items:
            - key: config.json
              path: config.json
  examplejob:
    job:
      enabled: true
      restartPolicy: OnFailure
      backoffLimit: 7
      completions: 7
      parallelism: 7
    suspended: false # Job will run if false, set to true to skip it
    annotations:
      argocd.argoproj.io/hook: PreSync
      argocd.argoproj.io/hook-delete-policy: HookSucceeded
    image:
      tag: 1.0.0
    command:
      - /bin/sh
      - -c
    args:
      - /scripts/example-command.sh # Command script to run
    envs:
      ENV_VAR_1: value1
      ENV_VAR_2: value2
    extraEnvs:
      - name: SPRING_DATASOURCE_USERNAME
        value: DBAdmin
        # - name: SPRING_DATASOURCE_PASSWORD
        #   valueFrom:
        #     secretKeyRef:
        #       name: example
        #       key: APP_DB_PASS
        # - name: SPECIAL_LEVEL_KEY
        #   valueFrom:
        #     configMapKeyRef:
        #       name: special-config
        #       key: SPECIAL_LEVEL
    envFrom:
      - secretRef:
          name: example
      - configMapRef:
          name: example
    securityContext:
      readOnlyRootFilesystem: false
    resources:
      limits:
        cpu: 400m
        memory: 3Gi
      requests:
        cpu: 400m
        memory: 3Gi
    initContainers:
      - name: theme
        image: registry.gamewarden.io/steelbank/cgr/git:2.44.0-r2
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |-
            git clone https://oauth2:$token@code.gamewarden.io/sandbox/gamewarden-kc-theme.git /tmp/themes
            cp -R /tmp/themes/theme/* /tmp/
            rm -rf /tmp/themes
        volumeMounts:
          - name: theme
            mountPath: /tmp/
        env:
          - name: token
            valueFrom:
              secretKeyRef:
                name: keycloak-keycloak-git
                key: token
    volumeMounts:
      - name: example-config-volume
        mountPath: /wfConfig
    volumes:
      - name: example-config-volume
        configMap:
          name: example-lens
          items:
            - key: config.json
              path: config.json
  backendMultiContainer:
    replicaCount: 2
    image:
      tag:
    enabled: true
    containers:
      backend:
        envs:
          test1: yes
          test2: noooo
        labels:
          protect: keycloak
        resources:
          limits:
            cpu: 400m
            memory: 3Gi
          requests:
            cpu: 400m
            memory: 3Gi
        image:
          name: rear
          tag: isanotherwaytosayit
        service:
          type: ClusterIP
          port: 80
          name: http
          targetPort: 8080
          appProtocol: http
          additionalPorts:
            - port: 5005
              targetPort: 5005
              protocol: TCP
              name: backend
      gingerbreadMan:
        securityContext:
        # test: test
        envs:
          testVar1: eat
          testVariableTwo: me
        image:
          name: test1image
          tag: test1
      mainContainer:
        image:
          name: test2image
          tag: test2
##  INFO
##    Multi container pods requires image tag to be set at the microservice level:
##
##      microservices:
##        backendMultiContainer:
##          image:
##            tag: null
##
##    Virtual Services are not enabled with multi-container deployments or statefulsets
global:
  applicationName: ice
  customerName: testapp
  impactLevel: il2
  environment: dev
  gateway: istio-system/private
  domain: practice.gamewarden.io
  image:
    defaultImageRegistry: registry.gamewarden.io
    defaultImageRepository: testapp
  istio:
    mtls:
      enabled: false
  destinationCluster: multi-tenant-development-cluster
ciliumNetworkPolicies:
  enabled: false
# extraManifests:
#   test:
#     apiVersion: v1
#     a: test
#     kind: test
additional: property-test
generatedSecrets:
  enabled: false
argocd:
  wrapAll: true
  disableProjectCreation: true
  projectOverride: argocd-override
  # projectOverride: subChartProjectOverride
  serverSideApply: false
  namespace: global-namespace
  wrapAllNameOverride: "overriddenName"
  #   wrapperAppOff: true
  wrapperAppWave: '1'
  wrapperSync: false
subCharts:
  clamav:
    serverSideApply: false
    # project: overrideProjectName

    enabled: false
    chartUrl: registry.gamewarden.io/charts
    chart: clamav
    revision: 0.0.2
    values:
      test: test
    valuesRepo: https://code.il2.gamewarden.io/gamewarden/tools/charts/testValues.git
    valuesRevision: main
    valueFiles:
      - $clamav/testValues/base.yaml
      - $clamav/testValues/dev.yaml
    name: clamav
    project: subChart-override
    wave: 3
  pgadmin:
    chart: pgadmin
    enabled: false
    revision: 0.1.0
    values:
      existingSecret: pgadmin4-password
      podLabels:
        protect: keycloak
      selectorLabels:
        protect: keycloak
  opensearch:
    enabled: false
    revision: 2.19.0
    chart: opensearch
    values:
      extraEnvs:
        - name: DISABLE_INSTALL_DEMO_CONFIG
          value: 'true'
        - name: DISABLE_SECURITY_PLUGIN
          value: 'true'
        - name: DISABLE_INSTALL_DEMO_CONFIG
          value: 'true'
        - name: DISABLE_SECURITY_PLUGIN
          value: 'true'
      global:
        dockerRegistry: registry.gamewarden.io
      image:
        repository: steelbank/cgr/opensearch
        tag: 2.13.0-r0
      imagePullSecrets:
        - name: private-registry
        - name: private-registry
      persistence:
        image: steelbank/cgr/busybox
        imageTag: 1.36.1-r25
      replicas: 2
    namespace: otherNamespace
  mysql:
    enabled: false
    revision: 9.1.7-bb.1
    values:
      # enable in customer values file to enable master/slave configuration
      # architecture: replication
      auth:
        existingSecret: generated-secrets
      primary:
        resources:
          requests:
            cpu: 2000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 2Gi
      secondary:
        resources:
          requests:
            cpu: 2000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 2Gi
        replicaCount: 3
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - mysql
                topologyKey: kubernetes.io/hostname
  postgresql:
    revision: 12.2.2
    enabled: true
    chart: postgresql
    values:
      image:
        registry: registry.gamewarden.io
        repository: ironbank-proxy/ironbank/bitnami/postgres
        tag: 16.3.0
      global:
        imagePullSecrets:
          - private-registry
        postgresql:
          auth:
            existingSecret: generated-secrets
            secretKeys:
              adminPasswordKey: GENERATED_DB_PASSWORD
              userPasswordKey: GENERATED_DB_PASSWORD
              replicationPasswordKey: GENERATED_ADMIN_PASSWORD
      auth:
        existingSecret: generated-secrets
        secretKeys:
          adminPasswordKey: GENERATED_DB_PASSWORD
          userPasswordKey: GENERATED_DB_PASSWORD
          replicationPasswordKey: GENERATED_ADMIN_PASSWORD
      primary:
        containerSecurityContext:
          capabilities:
            drop:
              - ALL
      readReplicas:
        containerSecurityContext:
          capabilities:
            drop:
              - ALL
      initContainers: []
  postgresql-ha:
    enabled: false
    revision: 11.1.4
    chart: postgresql-ha
    values:
      persistence:
        size: 8Gi
      pgpool:
        existingSecret: generated-secrets
        image:
          registry: registry.gamewarden.io
          repository: ironbank-proxy/ironbank/bitnami/pgpool
          tag: 4.3.2-debian-10-r15-ubi9
      postgresql:
        existingSecret: generated-secrets
        image:
          registry: registry.gamewarden.io
          repository: ironabank-proxy/ironbank/bitnami/postgresql-repmgr
          tag: 16.2.0
      initContainers: []
  strimzi-kafka-operator:
    revision: 0.40.0
    enabled: false
    values:
      defaultImageRegistry: registry.gamewarden.io
      defaultImageRepository: ironbank-proxy/ironbank/opensource/strimzi
      defaultImageTag: 0.40.0
      image:
        imagePullSecrets: private-registry
        registry: ''
        repository: ''
        name: operator
        tag: ''
  neo4j:
    revision: 5.18.1
    enabled: false
  # In order to deploy Minio-instance minio-operator needs to be enabled is cosmic on the cluster
  minio-instance:
    revision: 5.0.5-bb.0
    enabled: false
    # Example provided secret for env for tentant using generated secrets:
    # existingSecretName: "generated-secrets"
    #
    # Example HA config with 1 5GB volume per server and two buckets created, defaults to 4 servers
    # tenant:
    #   pools:
    #     - volumesPerServer: 1
    #       size: 5Gi
    #   buckets:
    #     - name: bucket1
    #     - name: bucket2
  minio-standalone:
    enabled: false
    revision: 0.0.2
    # Example webhook setup:
    # envs:
    #   MINIO_NOTIFY_WEBHOOK_ENABLE_primary: "on"
    #   MINIO_NOTIFY_WEBHOOK_ENDPOINT_primary: "http://backend.skyschedule.svc.cluster.local:80/api/refresh"
    #REF: https://min.io/docs/minio/linux/administration/monitoring/publish-events-to-webhook.html#
    # enabled: false
    # microservices:
    #   minio.minio.svc.cluster.local:
    #     volumeClaimTemplates: |
    #       - metadata:
    #           name: minio.minio.svc.cluster.local
    #         spec:
    #           accessModes: [ "ReadWriteOnce" ]
    #           resources:
    #             requests:
    #               storage: 30Gi
  milvus:
    enabled: false
    revision: 4.0.31
  nats:
    enabled: false
    revision: 1.1.11
    values:
      fullnameOverride: nats
      container:
        image:
          registry: registry.gamewarden.io
          repository: steelbank/cgr/nats
          tag: 2.10.14-r0
      natsBox:
        container:
          image:
            registry: registry.gamewarden.io
            repository: steelbank/opensource/nats/nats-box
            tag: 0.14.3
      reloader:
        enabled: false
      exporter:
        enabled: false
  redis:
    revision: 17.9.5
    enabled: false
    values:
      auth:
        existingSecret: generated-secrets
        existingSecretPasswordKey: GENERATED_REDIS_PASSWORD
  mongodb:
    enabled: false
    revision: 13.12.1
    values:
      enabled: false
      global:
        imagePullSecrets:
          - name: private-registry
      auth:
        existingSecret: generated-secrets
      image:
        registry: registry.gamewarden.io
        repository: ironbank-proxy/ironbank/bitnami/mongodb
        tag: 5.0.9
        pullPolicy: IfNotPresent
  redis2:
    revision: 17.9.5
    name: redis
    values:
      nameOverride: redis2
      auth:
        existingSecret: generated-secrets
        existingSecretPasswordKey: GENERATED_REDIS_PASSWORD
  justValuesUchart:
    values:
      simple: test
    sync: false
  uCharWithValuesRepo:
    values:
      test: values
    valuesRepo: https://github.com/second-front/example-values.git
    valuesRevision: main
    valueFiles:
      - $values/test-dev/base.yaml
      - $values/test-dev/dev.yaml
###  TEST values:
# helm template . docs/example-values.yaml --debug
###
nameOverride: ''
fullnameOverride: ''
imageCredentials:
  - registry: registry.gamewarden.io
    username: external-registry-pull-only
    password: testing
secrets:
  stringData:
    Single-Secret-Name: Single1234
    BigSecret: MultiSecret
config:
  enabled: true
  annotations:
    imageregistry: https://hub.docker.com/
  data:
    logLevel: debug
    secretswithinconfigmap: testtest1
    service-url: http://localhost:9005
    config.json: |
      {
        "api": {
            "defaultServiceUrl": "http://example"
        },
        "auth": {
            "clientId": "34b1832e-1c97-422a-b99e-7f8d2d66348f",
            "authServiceUrl": "http://example"
        }
      }
    testConfigAnother: '1234'
extraManifests:
  - apiVersion: kafka.strimzi.io/v1beta2
    kind: Kafka
    metadata:
      name: kafka-cluster
      namespace: skyschedule
    spec:
      kafka:
        replicas: 1
        listeners:
          - name: plain
            port: 9092
            type: internal
            tls: false
          - name: tls
            port: 9093
            type: internal
            tls: true
            authentication:
              type: tls
        storage:
          type: jbod
          volumes:
            - id: 0
              type: persistent-claim
              size: 100Gi
              deleteClaim: false
        config:
          offsets.topic.replication.factor: 1
          transaction.state.log.replication.factor: 1
          transaction.state.log.min.isr: 1
          default.replication.factor: 1
          min.insync.replicas: 1
          message.max.bytes: 100000000 # Increase the max message size to 100 MB
      zookeeper:
        replicas: 1
        storage:
          type: persistent-claim
          size: 100Gi
          deleteClaim: false
      entityOperator:
        topicOperator: {}
        userOperator: {}
# Allows setting a threshold of minimun available pods or maximum unavailable pods
podDisruptionBudget: {}
# minAvailable: 5
# maxUnavailable: 1

generateSecretsJob:
  enabled: true
  secrets:
    example-secret: # map key becomes the secret name so must be lowercase
      type: Opaque
      stringData:
        exampleOpaqueSecretKey: ""
        randomKey: ""
        NUGET_KEY: "nuget" # generates a 40 character password required for nuget keys
    example-second-secret:
      type: Opaque
      stringData:
        exampleOpaqueSecretKey: ""
        randomKey: ""
    example-tls-secret:
      type: kubernetes.io/tls
    example-basic-auth-secret:
      type: kubernetes.io/basic-auth
      stringData:
        username: example-user
# rbac:
#   create: true

# defaults:
# serviceAccount:
#   create: true
#   name: "utility"
# virtualService:
#   enabled: false
