{
  "instance": {
    "type": "object",
    "additionalProperties": false,
    "properties": {
      "enabled": {
        "type": "boolean",
"description": "Determines whether the workload is active. Set to false to disable this resource.",
        "default": true
      },
      "type": {
        "type": "string",
        "description": "Specifies the Kubernetes resource type to be used for the workload. Options include deployment, statefulset, daemonset, cronjob, or job.",
        "enum": [
          "deployment",
          "daemonset",
          "statefulset",
          "cronjob",
          "job"
        ],
        "default": "deployment"
      },
      "annotations": {
        "$ref": "metadata.json#/annotations",
        "description": "Metadata annotations to attach to the resource. These can be used by Kubernetes or other tools for custom processing."
      },
      "labels": {
        "$ref": "metadata.json#/labels",
        "description": "Metadata labels for the resource. Labels are used to organize and select resources."
      },
      "nameOverride": {
        "type": "string",
        "description": "Overrides the default name for the deployed resource. If more than one resource exists, name will be prepended with release-name"
      },
      "pod": {
        "$ref": "pod.json#/options",
        "description": "Configuration options for the pod specification, such as affinity rules, tolerations, or other pod-level settings."
      },
      "replicas": {
        "type": [
          "integer",
          "null"
        ],
        "description": "Defines the desired number of replicas for the deployment. A null value can be used to let Kubernetes decide the replica count. (i.e. autoscaling)",
        "default": 1
      },
      "revisionHistoryLimit": {
        "type": "integer",
        "description": "Specifies the number of old ReplicaSets or revisions to retain for rollback purposes."
      },
      "strategy": {
        "type": "string",
        "enum": [
          "RollingUpdate",
          "Recreate"
        ],
        "description": "Defines the update strategy for deployments. 'RollingUpdate' allows incremental updates while 'Recreate' terminates all pods before starting new ones. Only applicable when type is 'deployment'.",
        "default": "RollingUpdate"
      },
      "rollingUpdate": {
        "type": "object",
        "description": "Specifies the parameters for a rolling update when using the 'RollingUpdate' strategy. Only applicable when type is 'deployment'.",
        "additionalProperties": false,
        "properties": {
          "maxSurge": {
            "type": [ "integer", "string" ],
            "description": "Specifies the maximum number (or percentage) of additional pods that can be created during the update."
          },
          "maxUnavailable": {
            "type": [ "integer", "string" ],
            "description": "Specifies the maximum number (or percentage) of pods that can be unavailable during the update."
          }
        }
      },
      "cronjob": {
        "$ref": "#/cronjob",
        "description": "CronJob-specific settings. These apply only when the instance type is set to 'cronjob'."
      },
      "job": {
        "$ref": "#/job",
        "description": "Job-specific settings. These apply only when the instance type is set to 'job'."
      },
      "statefulset": {
        "$ref": "#/statefulset",
        "description": "StatefulSet-specific configuration options. Only applicable when the instance type is 'statefulset'."
      },
      "autoscaling": {
        "$ref": "horizontalPodAutoscaler.json#/autoscaling",
        "description": "Defines the horizontal pod autoscaling configuration. When provided, these settings enable dynamic scaling of the workload based on observed metrics."
      },
      "applyDefaultContainerOptionsToInitContainers": {
        "type": "boolean",
        "description": "Specifies whether the default container options should also be applied to init containers.",
        "default": true
      },
      "defaultContainerOptionsStrategy": {
        "type": "string",
        "description": "Determines how default container options are applied. 'overwrite' replaces existing settings while 'merge' combines them with container-specific configurations.",
        "default": "overwrite",
        "enum": [
          "overwrite",
          "merge"
        ]
      },
      "defaultContainerOptions": {
        "type": "object",
        "description": "Default container configuration options applied to all containers in workload unless overridden individually. Includes options such as command, arguments, environment variables, image settings, resource limits, and security context.",
        "additionalProperties": false,
        "properties": {
          "args": {
              "$ref": "containers.json#/args",
              "description": "Default command-line arguments for the container."
          },
          "command": {
            "$ref": "containers.json#/command",
            "description": "Default command to run in the container."
          },
          "env": {
            "$ref": "containers.json#/env",
            "description": "Default environment variables for the container."
          },
          "envFrom": {
            "$ref": "containers.json#/envFrom",
            "description": "Specifies sources to populate environment variables from."
          },
          "image": {
            "$ref": "containers.json#/image",
            "description": "Container image settings including repository, tag, and pull policy."
          },
          "resources": {
            "$ref": "k8s-api.json#/core.v1.ResourceRequirements",
            "description": "Specifies resource requests and limits for the container."
          },
          "securityContext": {
            "$ref": "k8s-api.json#/core.v1.ContainerSecurityContext",
            "description": "Defines security options for the container, such as user privileges and capabilities."
          }
        }
      },
      "initContainers": {
        "type": "object",
        "description": "Defines init containers that run prior to the main containers. Each init container is specified under a unique id.",
        "additionalProperties": {
          "$ref": "containers.json#/container"
        }
      },
      "containers": {
        "type": "object",
        "description": "Defines containers for workload. Each container is specified under a unique id.",
        "additionalProperties": {
          "$ref": "containers.json#/container"
        }
      },
      "serviceAccount": {
        "type": "object",
        "description": "Specifies the ServiceAccount used by the workload. This may include a custom name or id.",
        "properties": {
          "name": {
            "type": "string",
             "description": "Name of the ServiceAccount to use."
          },
          "id": {
            "type": "string",
             "description": "ID of the ServiceAccount to use referenced from serviceAccounts map."
          }
        }
      }
    },
    "allOf": [
      {
        "if": {
          "properties": {
            "type": { "const": "deployment" }
          }
        },
        "then": {
          "if": {
            "properties": {
              "strategy": { "const": "RollingUpdate" }
            },
            "required": [ "strategy" ]
          },
          "else": {
            "not": {
              "anyOf": [
                { "required": [ "rollingUpdate" ] }
              ]
            }
          }
        },
        "else": {
          "not": {
            "anyOf": [
              { "required": [ "strategy" ] },
              { "required": [ "rollingUpdate" ] }
            ]
          }

        }
      },
      {
        "if": {
          "not": {
            "properties": {
              "type": { "const": "statefulset" }
            },
            "required": [ "type" ]
          }
        },
        "then": {
          "not": {
            "anyOf": [
              { "required": [ "statefulset" ] }
            ]
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": { "const": "cronjob" }
          },
          "required": [ "type" ]
        },
        "then": {
          "allOf": [
            { "required": [ "cronjob" ] },
            {
              "not": {
                "anyOf": [
                  { "required": [ "autoscaling" ] }
                ]
              }
            }
          ]
        },
        "else": {
          "allOf": [
            {
              "not": {
                "anyOf": [
                  { "required": [ "cronjob" ] }
                ]
              }
            }
          ]
        }
      },
      {
        "if": {
          "properties": {
            "type": { "const": "job" }
          },
          "required": [ "type" ]
        },
        "then": {
          "allOf": [
            {
              "not": {
                "anyOf": [
                  { "required": [ "autoscaling" ] }
                ]
              }
            }
          ]
        },
        "else": {
          "not": {
            "anyOf": [
              { "required": [ "job" ] }
            ]
          }
        }
      },
      {
        "if": {
          "properties": {
            "type": { "const": "daemonset" }
          },
          "required": [ "type" ]
        },
        "then": {
          "allOf": [
            {
              "not": {
                "anyOf": [
                  { "required": [ "autoscaling" ] }
                ]
              }
            }
          ]
        },
        "else": {
          "not": {
            "anyOf": [
              { "required": [ "daemonset" ] }
            ]
          }
        }
      }
    ]
  },
  "statefulset": {
    "type": "object",
    "description": "Policy settings that determine whether PersistentVolumeClaims are retained or deleted when the StatefulSet is scaled down or deleted.",
    "additionalProperties": false,
    "properties": {
      "podManagementPolicy": {
        "type": "string",
        "description": "Specifies the policy for managing pod creation and termination in the StatefulSet (e.g., 'OrderedReady')."
      },
      "persistentVolumeClaimRetentionPolicy": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "whenDeleted": {
            "type": "string",
            "description": "Specifies whether PVCs should be deleted or retained when the StatefulSet is deleted.",
            "enum": [
              "Delete",
              "Retain"
            ],
            "default": "Retain"
          },
          "whenScaled": {
            "type": "string",
            "description": "Specifies whether PVCs should be deleted or retained when the StatefulSet is scaled down.",
            "enum": [
              "Delete",
              "Retain"
            ],
            "default": "Retain"
          }
        }
      },
      "volumeClaimTemplates": {
        "type": "array",
        "description": "An array of volume claim templates used to provision persistent storage for stateful applications.",
        "items": {
          "$ref": "#/statefulset.volumeClaimTemplate"
        }
      }
    }
  },
  "statefulset.volumeClaimTemplate": {
    "type": "object",
    "description": "Template for a PersistentVolumeClaim used by a StatefulSet. Defines the storage parameters for a volume.",
    "additionalProperties": false,
    "properties": {
      "enabled": {
        "type": "boolean",
        "description": "Indicates whether this volume claim template is active. Set to false to disable provisioning for this template.",
        "default": true
      },
      "accessMode": {
        "type": "string",
        "description": "Specifies the access mode for the volume (e.g., 'ReadWriteOnce', 'ReadOnlyMany')."
      },
      "advancedMounts": {
        "type": "object",
        "description": "Advanced mount options to customize mount paths for the volume.",
        "additionalProperties": {
          "$ref": "persistence.json#/mountPathCollection"
        }
      },
      "annotations": {
        "$ref": "metadata.json#/annotations",
        "description": "Metadata annotations applied to the volume claim."
      },
      "dataSource": {
        "$ref": "persistence.json#/dataSourceReference",
        "description": "Reference to an external data source for the volume claim."
      },
      "dataSourceRef": {
        "$ref": "persistence.json#/dataSourceReference",
        "description": "Alternative reference to an external data source for the volume claim."
      },
      "globalMounts": {
        "$ref": "persistence.json#/globalMounts",
        "description": "Global mount settings applicable to this volume claim."
      },
      "labels": {
        "$ref": "metadata.json#/labels",
        "description": "Metadata labels associated with the volume claim."
      },
      "name": {
        "type": "string",
        "description": "Unique name identifier for the volume claim template."
      },
      "size": {
        "type": "string",
        "description": "Specifies the storage size requested (e.g., '10Gi')."
      },
      "storageClass": {
        "type": "string",
        "description": "Specifies the storage class to be used for provisioning the volume."
      }
    },
    "required": [
      "name",
      "size"
    ]
  },
  "cronjob": {
    "type": "object",
    "description": "CronJob configuration for scheduled jobs. Use this section only when the instance type is set to 'cronjob'.",
    "additionalProperties": false,
    "properties": {
      "backoffLimit": {
        "type": "integer",
        "description": "Specifies the number of retries for a failed CronJob before it is marked as failed.",
        "default": 6
      },
      "concurrencyPolicy": {
        "type": "string",
        "description": "Determines how concurrent executions of the CronJob are handled (e.g., 'Forbid' to prevent overlap).",
        "default": "Forbid"
      },
      "failedJobsHistory": {
        "type": "integer",
        "description": "Specifies the number of failed job history records to retain for troubleshooting.",
        "default": 1
      },
      "parallelism": {
        "type": "integer",
        "description": "Specifies the maximum number of concurrent jobs allowed."
      },
      "schedule": {
        "type": "string",
        "description": "A cron-formatted string that defines the execution schedule for the job."
      },
      "startingDeadlineSeconds": {
        "type": "integer",
        "description": "The deadline in seconds for starting the job if the scheduled time is missed.",
        "default": 30
      },
      "successfulJobsHistory": {
        "type": "integer",
        "description": "Specifies the number of successful job history records to retain.",
        "default": 1
      },
      "suspend": {
        "type": "boolean",
        "description": "If set to true, suspends subsequent executions of the CronJob.",
        "default": false
      },
      "timeZone": {
        "type": "string",
        "description": "Specifies the time zone in which the schedule is interpreted."
      },
      "activeDeadlineSeconds": {
        "type": "integer",
        "description": "The maximum time in seconds a job can run before it is terminated."
      },
      "ttlSecondsAfterFinished": {
        "type": "integer",
        "description": "Specifies the time-to-live (TTL) in seconds for a job after it has finished before it is cleaned up."
      }
    },
    "required": [
      "schedule"
    ]
  },
  "job": {
    "type": "object",
    "description": "Job configuration for one-time or ad-hoc tasks. Use this section only when the instance type is set to 'job'.",
    "additionalProperties": false,
    "properties": {
      "backoffLimit": {
        "type": "integer",
        "description": "Specifies the number of retries for a failed job before it is considered failed.",
        "default": 6
      },
      "completions": {
        "description": "Specifies the desired number of successfully completed pods for the job. This can be a fixed number or a more complex configuration."
      },
      "completionMode": {
        "description": "Defines how pod completions are tracked. For example, the 'NonIndexed' mode tracks overall completions."
      },
      "parallelism": {
        "type": "integer",
        "description": "Specifies the maximum number of pods that can run concurrently for this job."
      },
      "suspend": {
        "type": "boolean",
        "description": "If true, prevents new pods from being scheduled for the job.",
        "default": false
      },
      "activeDeadlineSeconds": {
        "type": "integer",
        "description": "Specifies the maximum duration in seconds that the job is allowed to run before termination."
      },
      "ttlSecondsAfterFinished": {
        "type": "integer",
        "description": "Specifies the time-to-live (TTL) in seconds for the job after completion before it is automatically cleaned up."
      }
    }
  }
}
