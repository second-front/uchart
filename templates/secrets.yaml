{{/* Variables */}}
{{/* Accepts secrets.data or secrets.stringData - both accepting non-encoded values */}}
{{- $secrets := .Values.secrets.data }}
{{- $stringSecrets := .Values.secrets.stringData }}
{{- $randomSecretsGenerator := .Values.secrets.generateKeys }}

{{- if eq .Values.secrets.enabled true }}
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ .Values.global.applicationName | default .Values.applicationName }}-secrets
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "universal-app-chart.labels" . | indent 4 }}
stringData:
{{- with $randomSecretsGenerator }}
  {{- range $key, $value := . }}
  {{- $secretObj := (lookup "v1" "Secret" "{{ .Release.Namespace }}" "{{ .Values.global.applicationName | default .Values.applicationName }}-secrets" ) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  {{- $mSecret := (get $secretData $value) | default ( randAlphaNum 32 ) }}
  {{- printf "%s: %s" $value $mSecret | nindent 2 }}
{{- end }}
{{- end }}
{{- with $secrets }}
  {{- range $key, $value := . }}
  {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 2 }}
{{- end }}
{{- with $stringSecrets }}
  {{- range $key, $value := . }}
  {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 2 }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
