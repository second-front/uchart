{{- if or (.Values.argocd.wrapperAppOff) ( not .Values.subCharts ) }}
{{- range $msvc, $v := .Values.microservices}}
{{- with $ }}
{{- if $v }}
{{/* Variables */}}
{{- $secrets := ($v.secrets).data }}
{{- $randomSecretsGenerator := ($v.secrets).generateKeys }}
{{- $namespace := $v.namespace | default .Release.Namespace }}
{{- $annotations := $v.annotations | default (dict) }}

{{- if and ($v.secrets) (ne $v.enabled false) }}
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ $msvc }}-secret
  namespace: {{ $namespace }}
  labels:
{{ include "universal-app-chart.labels" . | indent 4 }}
  annotations:
{{- range $key, $value := $annotations }}
    {{ $key }}: {{ $value | quote }}
{{- end }}
stringData:
{{- with $randomSecretsGenerator }}
  # loop through keys and generate values if any don't exist
  {{- range $key, $value := . }}
  {{- $secretObj := (lookup "v1" "Secret" "{{ .Release.Namespace }}" "{{ $msvc }}-generated-secret" ) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $mSecret to existing secret data or generate a random one when not exists
  {{- $mSecret := (get $secretData $value) | default ( randAlphaNum 32 ) }}
  {{- printf "%s: %s" $value $mSecret | nindent 2 }}
{{- end }}
{{- end }}
{{- with $secrets }}
  {{- range $key, $value := . }}
  {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 2 }}



{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
