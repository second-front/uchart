###  TEST values:
# helm template . docs/example-values.yaml --debug
###
nameOverride: ""

# Used for subcharts
global:
  applicationName: example
  customerName: Example Company
  impactLevel: IL2
  environment: development
  gateway: istio-system/private
  domain: practice.gamewarden.io
  image:
    defaultImageRegistry: registry.gamewarden.io
    defaultImageRepository: agencies/agency-name

fullnameOverride: ""
imageCredentials:
  - registry: registry.gamewarden.io
    username: external-registry-pull-only
    password: testing
secrets:
  stringData:
    Single-Secret-Name: Single1234
    BigSecret: MultiSecret
config:
  enabled: true
  data:
    logLevel: debug
    secretswithinconfigmap: testtest1
    service-url: http://localhost:9005
    config.json: |
      {
        "api": {
            "defaultServiceUrl": "http://example"
        },
        "auth": {
            "clientId": "34b1832e-1c97-422a-b99e-7f8d2d66348f",
            "authServiceUrl": "http://example"
        }
      }
    testConfigAnother: "1234"

defaults:
  virtualService:
    enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 2Gi

extraManifests:
  - apiVersion: kafka.strimzi.io/v1beta2
    kind: Kafka
    metadata:
      name: kafka-cluster
      namespace: skyschedule
    spec:
      kafka:
        replicas: 1
        listeners:
          - name: plain
            port: 9092
            type: internal
            tls: false
          - name: tls
            port: 9093
            type: internal
            tls: true
            authentication:
              type: tls
        storage:
          type: jbod
          volumes:
            - id: 0
              type: persistent-claim
              size: 100Gi
              deleteClaim: false
        config:
          offsets.topic.replication.factor: 1
          transaction.state.log.replication.factor: 1
          transaction.state.log.min.isr: 1
          default.replication.factor: 1
          min.insync.replicas: 1
          message.max.bytes: 100000000 # Increase the max message size to 100 MB
      zookeeper:
        replicas: 1
        storage:
          type: persistent-claim
          size: 100Gi
          deleteClaim: false
      entityOperator:
        topicOperator: {}
        userOperator: {}

# Allows setting a threshold of minimun available pods or maximum unavailable pods
podDisruptionBudget: {}
  # minAvailable: 5
  # maxUnavailable: 1

# Should be organized by order of vs prefix for now
microservices:
  frontend:
    namespace: frontend
    resources:
      limits:
        cpu: 400m
        memory: 3Gi
      requests:
        cpu: 400m
        memory: 3Gi
    image:
      name: image-example
      tag: 0.0.0
      ## Notice that repository is not listed but name is.  If name is used, then defaultImageRegistry and defaultImageRepository will be used to build the full image tag.  Name is required to be above the tag key for auto image updates.
    command:
      - /bin/sh
      - -c
      - |
        source /vault/secrets/config
        <entrypoint script>
    ## example configmap per microservice
    config:
      data:
        .env: |
          logLevel: trace
          secretswithinconfigmap: sosecretshere
          service-url: http://localghost:9005
    ## adding secret for the microservice
    secrets:
      data:
        test: test
      ## generateKeys generates a random 32 alphanumeric value
      ## generateKeys supports adding additional keys after certain keys have already been generated
      generateKeys:
        - DB_PASSWORD
        - JOB_SECRET

    service:
      port: 5015
      targetPort: 5015
      # appProtocol: https
      additionalPorts:
        - port: 5005
          targetPort: 5005
          protocol: TCP
          name: backend
    # Example Liveness Probe
    livenessProbe:
    # amount of seconds to send the first probe
      initialDelaySeconds: 30
    # how often the probe checks for liveness
      periodSeconds: 60
    # number of seconds after which a probe times out
      timeoutSeconds: 15
    # minimum successful attempts needed to be deemed alive
      successThreshold: 1
    # number of failed checks to consider the liveness check failed
      failureThreshold: 3
    # examples of checking a specific port or path for liveness
      tcpSocket:
        port: 5015
      httpGet:
        path: /example
        port: 8080

    # Example Readiness Probe
    readinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 60
      timeoutSeconds: 15
      successThreshold: 1
      failureThreshold: 3
      tcpSocket:
        port: 5015
    envFrom:
    - secretRef:
        name: example
    - configMapRef:
        name: example
    extraEnvs:
      - name: SPRING_DATASOURCE_USERNAME
        value: DBAdmin
      - name: SPRING_DATASOURCE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: example
            key: APP_DB_PASS
      - name: SPECIAL_LEVEL_KEY
        valueFrom:
          configMapKeyRef:
            name: special-config
            key: SPECIAL_LEVEL
    volumeMounts:
      - name: example-config-volume
        mountPath: /wfConfig
    volumes: |-
      - name: example-config-volume
        configMap:
          name: example-lens
          items:
          - key: config.json
            path: config.json
    topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          foo: bar
  backend:
    statefulset:
      enabled: true
    image:
      repository: registry.gamewarden.io/agencies/example/testapp
      tag: 1.1.1
    args:
      - test
    config:
      data:
        logLevel: trace
        secretswithinconfigmap: sosecretshere
        service-url: http://localghost:9005
    service:
      port: 5015
      targetPort: 5015
      # appProtocol: http
    volumeClaimTemplates: |
      - metadata:
          name: www
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: "my-storage-class"
          resources:
            requests:
              storage: 1Gi
      - metadata:
          name: test
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: "my-storage-class"
          resources:
            requests:
              storage: 1Gi
    # Example Liveness Probe
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 60
      timeoutSeconds: 15
      successThreshold: 1
      failureThreshold: 3
      tcpSocket:
        port: 5015
      httpGet:
        path: /example
        port: 8080
    # Example Readiness Probe
    readinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 60
      timeoutSeconds: 15
      successThreshold: 1
      failureThreshold: 3
      tcpSocket:
        port: 5015
    secrets:
      stringData:
        test: test
    initContainers: |
      - name: theme
        image: registry.gamewarden.io/steelbank/cgr/git:2.44.0-r2
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |-
            git clone https://oauth2:$token@code.gamewarden.io/sandbox/gamewarden-kc-theme.git /tmp/themes
            cp -R /tmp/themes/theme/* /tmp/
            rm -rf /tmp/themes
        volumeMounts:
          - name: theme
            mountPath: /tmp/
        env:
          - name: token
            valueFrom:
              secretKeyRef:
                name: keycloak-keycloak-git
                key: token
    topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: zone
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          foo: bar
